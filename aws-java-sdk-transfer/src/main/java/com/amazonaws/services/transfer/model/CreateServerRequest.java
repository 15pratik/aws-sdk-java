/*
 * Copyright 2015-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 * 
 * http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
package com.amazonaws.services.transfer.model;

import java.io.Serializable;
import javax.annotation.Generated;

import com.amazonaws.AmazonWebServiceRequest;

/**
 * 
 * @see <a href="http://docs.aws.amazon.com/goto/WebAPI/transfer-2018-11-05/CreateServer" target="_top">AWS API
 *      Documentation</a>
 */
@Generated("com.amazonaws:aws-java-sdk-code-generator")
public class CreateServerRequest extends com.amazonaws.AmazonWebServiceRequest implements Serializable, Cloneable {

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when
     * <code>Protocols</code> is set to <code>FTPS</code>.
     * </p>
     */
    private String certificate;
    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled
     * server. When you host your endpoint within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over the internet. Your VPC's default
     * security groups are automatically assigned to your endpoint.
     * </p>
     */
    private EndpointDetails endpointDetails;
    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can choose
     * to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can
     * restrict access to your server and resources only within your VPC.
     * </p>
     */
    private String endpointType;
    /**
     * <p>
     * The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't
     * update the host key. Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a
     * href="https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key">Changing
     * the Host Key for Your AWS Transfer Family Server</a> in the <i>AWS Transfer Family User Guide</i>.
     * </p>
     */
    private String hostKey;
    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to <code>API_GATEWAY</code>. Accepts an array containing
     * all of the information required to call a customer-supplied authentication API, including the API Gateway URL.
     * Not required when <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     */
    private IdentityProviderDetails identityProviderDetails;
    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     * <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS Transfer
     * Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing.
     * The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     */
    private String identityProviderType;
    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon CloudWatch logs for monitoring and auditing
     * purposes.
     * </p>
     */
    private String loggingRole;
    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to
     * your server's endpoint. The available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     */
    private java.util.List<String> protocols;
    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     * </p>
     */
    private java.util.List<Tag> tags;

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when
     * <code>Protocols</code> is set to <code>FTPS</code>.
     * </p>
     * 
     * @param certificate
     *        The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when
     *        <code>Protocols</code> is set to <code>FTPS</code>.
     */

    public void setCertificate(String certificate) {
        this.certificate = certificate;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when
     * <code>Protocols</code> is set to <code>FTPS</code>.
     * </p>
     * 
     * @return The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when
     *         <code>Protocols</code> is set to <code>FTPS</code>.
     */

    public String getCertificate() {
        return this.certificate;
    }

    /**
     * <p>
     * The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when
     * <code>Protocols</code> is set to <code>FTPS</code>.
     * </p>
     * 
     * @param certificate
     *        The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. Required when
     *        <code>Protocols</code> is set to <code>FTPS</code>.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateServerRequest withCertificate(String certificate) {
        setCertificate(certificate);
        return this;
    }

    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled
     * server. When you host your endpoint within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over the internet. Your VPC's default
     * security groups are automatically assigned to your endpoint.
     * </p>
     * 
     * @param endpointDetails
     *        The virtual private cloud (VPC) endpoint settings that are configured for your file transfer
     *        protocol-enabled server. When you host your endpoint within your VPC, you can make it accessible only to
     *        resources within your VPC, or you can attach Elastic IPs and make it accessible to clients over the
     *        internet. Your VPC's default security groups are automatically assigned to your endpoint.
     */

    public void setEndpointDetails(EndpointDetails endpointDetails) {
        this.endpointDetails = endpointDetails;
    }

    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled
     * server. When you host your endpoint within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over the internet. Your VPC's default
     * security groups are automatically assigned to your endpoint.
     * </p>
     * 
     * @return The virtual private cloud (VPC) endpoint settings that are configured for your file transfer
     *         protocol-enabled server. When you host your endpoint within your VPC, you can make it accessible only to
     *         resources within your VPC, or you can attach Elastic IPs and make it accessible to clients over the
     *         internet. Your VPC's default security groups are automatically assigned to your endpoint.
     */

    public EndpointDetails getEndpointDetails() {
        return this.endpointDetails;
    }

    /**
     * <p>
     * The virtual private cloud (VPC) endpoint settings that are configured for your file transfer protocol-enabled
     * server. When you host your endpoint within your VPC, you can make it accessible only to resources within your
     * VPC, or you can attach Elastic IPs and make it accessible to clients over the internet. Your VPC's default
     * security groups are automatically assigned to your endpoint.
     * </p>
     * 
     * @param endpointDetails
     *        The virtual private cloud (VPC) endpoint settings that are configured for your file transfer
     *        protocol-enabled server. When you host your endpoint within your VPC, you can make it accessible only to
     *        resources within your VPC, or you can attach Elastic IPs and make it accessible to clients over the
     *        internet. Your VPC's default security groups are automatically assigned to your endpoint.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateServerRequest withEndpointDetails(EndpointDetails endpointDetails) {
        setEndpointDetails(endpointDetails);
        return this;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can choose
     * to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can
     * restrict access to your server and resources only within your VPC.
     * </p>
     * 
     * @param endpointType
     *        The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can
     *        choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint,
     *        you can restrict access to your server and resources only within your VPC.
     * @see EndpointType
     */

    public void setEndpointType(String endpointType) {
        this.endpointType = endpointType;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can choose
     * to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can
     * restrict access to your server and resources only within your VPC.
     * </p>
     * 
     * @return The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can
     *         choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint,
     *         you can restrict access to your server and resources only within your VPC.
     * @see EndpointType
     */

    public String getEndpointType() {
        return this.endpointType;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can choose
     * to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can
     * restrict access to your server and resources only within your VPC.
     * </p>
     * 
     * @param endpointType
     *        The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can
     *        choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint,
     *        you can restrict access to your server and resources only within your VPC.
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see EndpointType
     */

    public CreateServerRequest withEndpointType(String endpointType) {
        setEndpointType(endpointType);
        return this;
    }

    /**
     * <p>
     * The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can choose
     * to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint, you can
     * restrict access to your server and resources only within your VPC.
     * </p>
     * 
     * @param endpointType
     *        The type of VPC endpoint that you want your file transfer protocol-enabled server to connect to. You can
     *        choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint,
     *        you can restrict access to your server and resources only within your VPC.
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see EndpointType
     */

    public CreateServerRequest withEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType.toString();
        return this;
    }

    /**
     * <p>
     * The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't
     * update the host key. Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a
     * href="https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key">Changing
     * the Host Key for Your AWS Transfer Family Server</a> in the <i>AWS Transfer Family User Guide</i>.
     * </p>
     * 
     * @param hostKey
     *        The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.</p>
     *        <important>
     *        <p>
     *        If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server,
     *        don't update the host key. Accidentally changing a server's host key can be disruptive.
     *        </p>
     *        </important>
     *        <p>
     *        For more information, see <a
     *        href="https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     *        >Changing the Host Key for Your AWS Transfer Family Server</a> in the <i>AWS Transfer Family User
     *        Guide</i>.
     */

    public void setHostKey(String hostKey) {
        this.hostKey = hostKey;
    }

    /**
     * <p>
     * The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't
     * update the host key. Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a
     * href="https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key">Changing
     * the Host Key for Your AWS Transfer Family Server</a> in the <i>AWS Transfer Family User Guide</i>.
     * </p>
     * 
     * @return The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.</p>
     *         <important>
     *         <p>
     *         If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server,
     *         don't update the host key. Accidentally changing a server's host key can be disruptive.
     *         </p>
     *         </important>
     *         <p>
     *         For more information, see <a
     *         href="https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     *         >Changing the Host Key for Your AWS Transfer Family Server</a> in the <i>AWS Transfer Family User
     *         Guide</i>.
     */

    public String getHostKey() {
        return this.hostKey;
    }

    /**
     * <p>
     * The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.
     * </p>
     * <important>
     * <p>
     * If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server, don't
     * update the host key. Accidentally changing a server's host key can be disruptive.
     * </p>
     * </important>
     * <p>
     * For more information, see <a
     * href="https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key">Changing
     * the Host Key for Your AWS Transfer Family Server</a> in the <i>AWS Transfer Family User Guide</i>.
     * </p>
     * 
     * @param hostKey
     *        The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.</p>
     *        <important>
     *        <p>
     *        If you aren't planning to migrate existing users from an existing SFTP-enabled server to a new server,
     *        don't update the host key. Accidentally changing a server's host key can be disruptive.
     *        </p>
     *        </important>
     *        <p>
     *        For more information, see <a
     *        href="https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key"
     *        >Changing the Host Key for Your AWS Transfer Family Server</a> in the <i>AWS Transfer Family User
     *        Guide</i>.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateServerRequest withHostKey(String hostKey) {
        setHostKey(hostKey);
        return this;
    }

    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to <code>API_GATEWAY</code>. Accepts an array containing
     * all of the information required to call a customer-supplied authentication API, including the API Gateway URL.
     * Not required when <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     * 
     * @param identityProviderDetails
     *        Required when <code>IdentityProviderType</code> is set to <code>API_GATEWAY</code>. Accepts an array
     *        containing all of the information required to call a customer-supplied authentication API, including the
     *        API Gateway URL. Not required when <code>IdentityProviderType</code> is set to
     *        <code>SERVICE_MANAGED</code>.
     */

    public void setIdentityProviderDetails(IdentityProviderDetails identityProviderDetails) {
        this.identityProviderDetails = identityProviderDetails;
    }

    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to <code>API_GATEWAY</code>. Accepts an array containing
     * all of the information required to call a customer-supplied authentication API, including the API Gateway URL.
     * Not required when <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     * 
     * @return Required when <code>IdentityProviderType</code> is set to <code>API_GATEWAY</code>. Accepts an array
     *         containing all of the information required to call a customer-supplied authentication API, including the
     *         API Gateway URL. Not required when <code>IdentityProviderType</code> is set to
     *         <code>SERVICE_MANAGED</code>.
     */

    public IdentityProviderDetails getIdentityProviderDetails() {
        return this.identityProviderDetails;
    }

    /**
     * <p>
     * Required when <code>IdentityProviderType</code> is set to <code>API_GATEWAY</code>. Accepts an array containing
     * all of the information required to call a customer-supplied authentication API, including the API Gateway URL.
     * Not required when <code>IdentityProviderType</code> is set to <code>SERVICE_MANAGED</code>.
     * </p>
     * 
     * @param identityProviderDetails
     *        Required when <code>IdentityProviderType</code> is set to <code>API_GATEWAY</code>. Accepts an array
     *        containing all of the information required to call a customer-supplied authentication API, including the
     *        API Gateway URL. Not required when <code>IdentityProviderType</code> is set to
     *        <code>SERVICE_MANAGED</code>.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateServerRequest withIdentityProviderDetails(IdentityProviderDetails identityProviderDetails) {
        setIdentityProviderDetails(identityProviderDetails);
        return this;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     * <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS Transfer
     * Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing.
     * The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * 
     * @param identityProviderType
     *        Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     *        <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS
     *        Transfer Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of
     *        your choosing. The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to
     *        call for authentication using the <code>IdentityProviderDetails</code> parameter.
     * @see IdentityProviderType
     */

    public void setIdentityProviderType(String identityProviderType) {
        this.identityProviderType = identityProviderType;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     * <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS Transfer
     * Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing.
     * The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * 
     * @return Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     *         <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS
     *         Transfer Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of
     *         your choosing. The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL
     *         to call for authentication using the <code>IdentityProviderDetails</code> parameter.
     * @see IdentityProviderType
     */

    public String getIdentityProviderType() {
        return this.identityProviderType;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     * <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS Transfer
     * Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing.
     * The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * 
     * @param identityProviderType
     *        Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     *        <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS
     *        Transfer Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of
     *        your choosing. The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to
     *        call for authentication using the <code>IdentityProviderDetails</code> parameter.
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see IdentityProviderType
     */

    public CreateServerRequest withIdentityProviderType(String identityProviderType) {
        setIdentityProviderType(identityProviderType);
        return this;
    }

    /**
     * <p>
     * Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     * <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS Transfer
     * Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of your choosing.
     * The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to call for
     * authentication using the <code>IdentityProviderDetails</code> parameter.
     * </p>
     * 
     * @param identityProviderType
     *        Specifies the mode of authentication for a file transfer protocol-enabled server. The default value is
     *        <code>SERVICE_MANAGED</code>, which allows you to store and access user credentials within the AWS
     *        Transfer Family service. Use the <code>API_GATEWAY</code> value to integrate with an identity provider of
     *        your choosing. The <code>API_GATEWAY</code> setting requires you to provide an API Gateway endpoint URL to
     *        call for authentication using the <code>IdentityProviderDetails</code> parameter.
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see IdentityProviderType
     */

    public CreateServerRequest withIdentityProviderType(IdentityProviderType identityProviderType) {
        this.identityProviderType = identityProviderType.toString();
        return this;
    }

    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon CloudWatch logs for monitoring and auditing
     * purposes.
     * </p>
     * 
     * @param loggingRole
     *        Allows the service to write your users' activity to your Amazon CloudWatch logs for monitoring and
     *        auditing purposes.
     */

    public void setLoggingRole(String loggingRole) {
        this.loggingRole = loggingRole;
    }

    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon CloudWatch logs for monitoring and auditing
     * purposes.
     * </p>
     * 
     * @return Allows the service to write your users' activity to your Amazon CloudWatch logs for monitoring and
     *         auditing purposes.
     */

    public String getLoggingRole() {
        return this.loggingRole;
    }

    /**
     * <p>
     * Allows the service to write your users' activity to your Amazon CloudWatch logs for monitoring and auditing
     * purposes.
     * </p>
     * 
     * @param loggingRole
     *        Allows the service to write your users' activity to your Amazon CloudWatch logs for monitoring and
     *        auditing purposes.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateServerRequest withLoggingRole(String loggingRole) {
        setLoggingRole(loggingRole);
        return this;
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to
     * your server's endpoint. The available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     * 
     * @return Specifies the file transfer protocol or protocols over which your file transfer protocol client can
     *         connect to your server's endpoint. The available protocols are:</p>
     *         <ul>
     *         <li>
     *         <p>
     *         Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     *         </p>
     *         </li>
     *         <li>
     *         <p>
     *         File Transfer Protocol (FTP): Unencrypted file transfer
     *         </p>
     *         </li>
     * @see Protocol
     */

    public java.util.List<String> getProtocols() {
        return protocols;
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to
     * your server's endpoint. The available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     * 
     * @param protocols
     *        Specifies the file transfer protocol or protocols over which your file transfer protocol client can
     *        connect to your server's endpoint. The available protocols are:</p>
     *        <ul>
     *        <li>
     *        <p>
     *        Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol (FTP): Unencrypted file transfer
     *        </p>
     *        </li>
     * @see Protocol
     */

    public void setProtocols(java.util.Collection<String> protocols) {
        if (protocols == null) {
            this.protocols = null;
            return;
        }

        this.protocols = new java.util.ArrayList<String>(protocols);
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to
     * your server's endpoint. The available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     * <p>
     * <b>NOTE:</b> This method appends the values to the existing list (if any). Use
     * {@link #setProtocols(java.util.Collection)} or {@link #withProtocols(java.util.Collection)} if you want to
     * override the existing values.
     * </p>
     * 
     * @param protocols
     *        Specifies the file transfer protocol or protocols over which your file transfer protocol client can
     *        connect to your server's endpoint. The available protocols are:</p>
     *        <ul>
     *        <li>
     *        <p>
     *        Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol (FTP): Unencrypted file transfer
     *        </p>
     *        </li>
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see Protocol
     */

    public CreateServerRequest withProtocols(String... protocols) {
        if (this.protocols == null) {
            setProtocols(new java.util.ArrayList<String>(protocols.length));
        }
        for (String ele : protocols) {
            this.protocols.add(ele);
        }
        return this;
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to
     * your server's endpoint. The available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     * 
     * @param protocols
     *        Specifies the file transfer protocol or protocols over which your file transfer protocol client can
     *        connect to your server's endpoint. The available protocols are:</p>
     *        <ul>
     *        <li>
     *        <p>
     *        Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol (FTP): Unencrypted file transfer
     *        </p>
     *        </li>
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see Protocol
     */

    public CreateServerRequest withProtocols(java.util.Collection<String> protocols) {
        setProtocols(protocols);
        return this;
    }

    /**
     * <p>
     * Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to
     * your server's endpoint. The available protocols are:
     * </p>
     * <ul>
     * <li>
     * <p>
     * Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     * </p>
     * </li>
     * <li>
     * <p>
     * File Transfer Protocol (FTP): Unencrypted file transfer
     * </p>
     * </li>
     * </ul>
     * 
     * @param protocols
     *        Specifies the file transfer protocol or protocols over which your file transfer protocol client can
     *        connect to your server's endpoint. The available protocols are:</p>
     *        <ul>
     *        <li>
     *        <p>
     *        Secure Shell (SSH) File Transfer Protocol (SFTP): File transfer over SSH
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol Secure (FTPS): File transfer with TLS encryption
     *        </p>
     *        </li>
     *        <li>
     *        <p>
     *        File Transfer Protocol (FTP): Unencrypted file transfer
     *        </p>
     *        </li>
     * @return Returns a reference to this object so that method calls can be chained together.
     * @see Protocol
     */

    public CreateServerRequest withProtocols(Protocol... protocols) {
        java.util.ArrayList<String> protocolsCopy = new java.util.ArrayList<String>(protocols.length);
        for (Protocol value : protocols) {
            protocolsCopy.add(value.toString());
        }
        if (getProtocols() == null) {
            setProtocols(protocolsCopy);
        } else {
            getProtocols().addAll(protocolsCopy);
        }
        return this;
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     * </p>
     * 
     * @return Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     */

    public java.util.List<Tag> getTags() {
        return tags;
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     * </p>
     * 
     * @param tags
     *        Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     */

    public void setTags(java.util.Collection<Tag> tags) {
        if (tags == null) {
            this.tags = null;
            return;
        }

        this.tags = new java.util.ArrayList<Tag>(tags);
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     * </p>
     * <p>
     * <b>NOTE:</b> This method appends the values to the existing list (if any). Use
     * {@link #setTags(java.util.Collection)} or {@link #withTags(java.util.Collection)} if you want to override the
     * existing values.
     * </p>
     * 
     * @param tags
     *        Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateServerRequest withTags(Tag... tags) {
        if (this.tags == null) {
            setTags(new java.util.ArrayList<Tag>(tags.length));
        }
        for (Tag ele : tags) {
            this.tags.add(ele);
        }
        return this;
    }

    /**
     * <p>
     * Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     * </p>
     * 
     * @param tags
     *        Key-value pairs that can be used to group and search for file transfer protocol-enabled servers.
     * @return Returns a reference to this object so that method calls can be chained together.
     */

    public CreateServerRequest withTags(java.util.Collection<Tag> tags) {
        setTags(tags);
        return this;
    }

    /**
     * Returns a string representation of this object. This is useful for testing and debugging. Sensitive data will be
     * redacted from this string using a placeholder value.
     *
     * @return A string representation of this object.
     *
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("{");
        if (getCertificate() != null)
            sb.append("Certificate: ").append(getCertificate()).append(",");
        if (getEndpointDetails() != null)
            sb.append("EndpointDetails: ").append(getEndpointDetails()).append(",");
        if (getEndpointType() != null)
            sb.append("EndpointType: ").append(getEndpointType()).append(",");
        if (getHostKey() != null)
            sb.append("HostKey: ").append("***Sensitive Data Redacted***").append(",");
        if (getIdentityProviderDetails() != null)
            sb.append("IdentityProviderDetails: ").append(getIdentityProviderDetails()).append(",");
        if (getIdentityProviderType() != null)
            sb.append("IdentityProviderType: ").append(getIdentityProviderType()).append(",");
        if (getLoggingRole() != null)
            sb.append("LoggingRole: ").append(getLoggingRole()).append(",");
        if (getProtocols() != null)
            sb.append("Protocols: ").append(getProtocols()).append(",");
        if (getTags() != null)
            sb.append("Tags: ").append(getTags());
        sb.append("}");
        return sb.toString();
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;

        if (obj instanceof CreateServerRequest == false)
            return false;
        CreateServerRequest other = (CreateServerRequest) obj;
        if (other.getCertificate() == null ^ this.getCertificate() == null)
            return false;
        if (other.getCertificate() != null && other.getCertificate().equals(this.getCertificate()) == false)
            return false;
        if (other.getEndpointDetails() == null ^ this.getEndpointDetails() == null)
            return false;
        if (other.getEndpointDetails() != null && other.getEndpointDetails().equals(this.getEndpointDetails()) == false)
            return false;
        if (other.getEndpointType() == null ^ this.getEndpointType() == null)
            return false;
        if (other.getEndpointType() != null && other.getEndpointType().equals(this.getEndpointType()) == false)
            return false;
        if (other.getHostKey() == null ^ this.getHostKey() == null)
            return false;
        if (other.getHostKey() != null && other.getHostKey().equals(this.getHostKey()) == false)
            return false;
        if (other.getIdentityProviderDetails() == null ^ this.getIdentityProviderDetails() == null)
            return false;
        if (other.getIdentityProviderDetails() != null && other.getIdentityProviderDetails().equals(this.getIdentityProviderDetails()) == false)
            return false;
        if (other.getIdentityProviderType() == null ^ this.getIdentityProviderType() == null)
            return false;
        if (other.getIdentityProviderType() != null && other.getIdentityProviderType().equals(this.getIdentityProviderType()) == false)
            return false;
        if (other.getLoggingRole() == null ^ this.getLoggingRole() == null)
            return false;
        if (other.getLoggingRole() != null && other.getLoggingRole().equals(this.getLoggingRole()) == false)
            return false;
        if (other.getProtocols() == null ^ this.getProtocols() == null)
            return false;
        if (other.getProtocols() != null && other.getProtocols().equals(this.getProtocols()) == false)
            return false;
        if (other.getTags() == null ^ this.getTags() == null)
            return false;
        if (other.getTags() != null && other.getTags().equals(this.getTags()) == false)
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int hashCode = 1;

        hashCode = prime * hashCode + ((getCertificate() == null) ? 0 : getCertificate().hashCode());
        hashCode = prime * hashCode + ((getEndpointDetails() == null) ? 0 : getEndpointDetails().hashCode());
        hashCode = prime * hashCode + ((getEndpointType() == null) ? 0 : getEndpointType().hashCode());
        hashCode = prime * hashCode + ((getHostKey() == null) ? 0 : getHostKey().hashCode());
        hashCode = prime * hashCode + ((getIdentityProviderDetails() == null) ? 0 : getIdentityProviderDetails().hashCode());
        hashCode = prime * hashCode + ((getIdentityProviderType() == null) ? 0 : getIdentityProviderType().hashCode());
        hashCode = prime * hashCode + ((getLoggingRole() == null) ? 0 : getLoggingRole().hashCode());
        hashCode = prime * hashCode + ((getProtocols() == null) ? 0 : getProtocols().hashCode());
        hashCode = prime * hashCode + ((getTags() == null) ? 0 : getTags().hashCode());
        return hashCode;
    }

    @Override
    public CreateServerRequest clone() {
        return (CreateServerRequest) super.clone();
    }

}
